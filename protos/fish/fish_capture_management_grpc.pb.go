// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protos/fish/fish_capture_management.proto

package nrm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NaturalResourceManagementClient is the client API for NaturalResourceManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NaturalResourceManagementClient interface {
	// Client-to-server stream
	//
	// Accepts a stream of ResourceUpdates and
	// returns StorageSummary
	Store(ctx context.Context, opts ...grpc.CallOption) (NaturalResourceManagement_StoreClient, error)
}

type naturalResourceManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewNaturalResourceManagementClient(cc grpc.ClientConnInterface) NaturalResourceManagementClient {
	return &naturalResourceManagementClient{cc}
}

func (c *naturalResourceManagementClient) Store(ctx context.Context, opts ...grpc.CallOption) (NaturalResourceManagement_StoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &NaturalResourceManagement_ServiceDesc.Streams[0], "/nrm.NaturalResourceManagement/Store", opts...)
	if err != nil {
		return nil, err
	}
	x := &naturalResourceManagementStoreClient{stream}
	return x, nil
}

type NaturalResourceManagement_StoreClient interface {
	Send(*ResourceUpdate) error
	Recv() (*StorageSummary, error)
	grpc.ClientStream
}

type naturalResourceManagementStoreClient struct {
	grpc.ClientStream
}

func (x *naturalResourceManagementStoreClient) Send(m *ResourceUpdate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *naturalResourceManagementStoreClient) Recv() (*StorageSummary, error) {
	m := new(StorageSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NaturalResourceManagementServer is the server API for NaturalResourceManagement service.
// All implementations must embed UnimplementedNaturalResourceManagementServer
// for forward compatibility
type NaturalResourceManagementServer interface {
	// Client-to-server stream
	//
	// Accepts a stream of ResourceUpdates and
	// returns StorageSummary
	Store(NaturalResourceManagement_StoreServer) error
	mustEmbedUnimplementedNaturalResourceManagementServer()
}

// UnimplementedNaturalResourceManagementServer must be embedded to have forward compatible implementations.
type UnimplementedNaturalResourceManagementServer struct {
}

func (UnimplementedNaturalResourceManagementServer) Store(NaturalResourceManagement_StoreServer) error {
	return status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedNaturalResourceManagementServer) mustEmbedUnimplementedNaturalResourceManagementServer() {
}

// UnsafeNaturalResourceManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NaturalResourceManagementServer will
// result in compilation errors.
type UnsafeNaturalResourceManagementServer interface {
	mustEmbedUnimplementedNaturalResourceManagementServer()
}

func RegisterNaturalResourceManagementServer(s grpc.ServiceRegistrar, srv NaturalResourceManagementServer) {
	s.RegisterService(&NaturalResourceManagement_ServiceDesc, srv)
}

func _NaturalResourceManagement_Store_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NaturalResourceManagementServer).Store(&naturalResourceManagementStoreServer{stream})
}

type NaturalResourceManagement_StoreServer interface {
	Send(*StorageSummary) error
	Recv() (*ResourceUpdate, error)
	grpc.ServerStream
}

type naturalResourceManagementStoreServer struct {
	grpc.ServerStream
}

func (x *naturalResourceManagementStoreServer) Send(m *StorageSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *naturalResourceManagementStoreServer) Recv() (*ResourceUpdate, error) {
	m := new(ResourceUpdate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NaturalResourceManagement_ServiceDesc is the grpc.ServiceDesc for NaturalResourceManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NaturalResourceManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nrm.NaturalResourceManagement",
	HandlerType: (*NaturalResourceManagementServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Store",
			Handler:       _NaturalResourceManagement_Store_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/fish/fish_capture_management.proto",
}
